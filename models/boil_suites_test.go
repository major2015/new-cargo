// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package cargo_db

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Roles", testRoles)
	t.Run("Subscriptions", testSubscriptions)
	t.Run("Tenants", testTenants)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Roles", testRolesDelete)
	t.Run("Subscriptions", testSubscriptionsDelete)
	t.Run("Tenants", testTenantsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("Subscriptions", testSubscriptionsQueryDeleteAll)
	t.Run("Tenants", testTenantsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("Subscriptions", testSubscriptionsSliceDeleteAll)
	t.Run("Tenants", testTenantsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Roles", testRolesExists)
	t.Run("Subscriptions", testSubscriptionsExists)
	t.Run("Tenants", testTenantsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Roles", testRolesFind)
	t.Run("Subscriptions", testSubscriptionsFind)
	t.Run("Tenants", testTenantsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Roles", testRolesBind)
	t.Run("Subscriptions", testSubscriptionsBind)
	t.Run("Tenants", testTenantsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Roles", testRolesOne)
	t.Run("Subscriptions", testSubscriptionsOne)
	t.Run("Tenants", testTenantsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Roles", testRolesAll)
	t.Run("Subscriptions", testSubscriptionsAll)
	t.Run("Tenants", testTenantsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Roles", testRolesCount)
	t.Run("Subscriptions", testSubscriptionsCount)
	t.Run("Tenants", testTenantsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Roles", testRolesHooks)
	t.Run("Subscriptions", testSubscriptionsHooks)
	t.Run("Tenants", testTenantsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("Subscriptions", testSubscriptionsInsert)
	t.Run("Subscriptions", testSubscriptionsInsertWhitelist)
	t.Run("Tenants", testTenantsInsert)
	t.Run("Tenants", testTenantsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("TenantToSubscriptionUsingSubscription", testTenantToOneSubscriptionUsingSubscription)
	t.Run("UserToTenantUsingTenant", testUserToOneTenantUsingTenant)
	t.Run("UserToRoleUsingRole", testUserToOneRoleUsingRole)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("RoleToUsers", testRoleToManyUsers)
	t.Run("SubscriptionToTenants", testSubscriptionToManyTenants)
	t.Run("TenantToUsers", testTenantToManyUsers)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("TenantToSubscriptionUsingSubscription", testTenantToOneSetOpSubscriptionUsingSubscription)
	t.Run("UserToTenantUsingTenant", testUserToOneSetOpTenantUsingTenant)
	t.Run("UserToRoleUsingRole", testUserToOneSetOpRoleUsingRole)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("RoleToUsers", testRoleToManyAddOpUsers)
	t.Run("SubscriptionToTenants", testSubscriptionToManyAddOpTenants)
	t.Run("TenantToUsers", testTenantToManyAddOpUsers)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Roles", testRolesReload)
	t.Run("Subscriptions", testSubscriptionsReload)
	t.Run("Tenants", testTenantsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Roles", testRolesReloadAll)
	t.Run("Subscriptions", testSubscriptionsReloadAll)
	t.Run("Tenants", testTenantsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Roles", testRolesSelect)
	t.Run("Subscriptions", testSubscriptionsSelect)
	t.Run("Tenants", testTenantsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Roles", testRolesUpdate)
	t.Run("Subscriptions", testSubscriptionsUpdate)
	t.Run("Tenants", testTenantsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("Subscriptions", testSubscriptionsSliceUpdateAll)
	t.Run("Tenants", testTenantsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Roles", testRolesUpsert)
	t.Run("Subscriptions", testSubscriptionsUpsert)
	t.Run("Tenants", testTenantsUpsert)
	t.Run("Users", testUsersUpsert)
}
